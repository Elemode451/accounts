"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDeepUserInfo = exports.getUserInfo = exports.addToUser = exports.loginUser = exports.registerUser = exports.USERS_TO_ACCOUNT = void 0;
exports.USERS_TO_ACCOUNT = new Map();
const USERS_TO_PASSWORD = new Map();
const USERS_TO_PARENT = new Map();
const USERS = [];
// Registers new user
const registerUser = (req, res) => {
    if (req.body.user === undefined) {
        res.status(400).send(`Cannot register blank User ID`);
    }
    else if (exports.USERS_TO_ACCOUNT.has(req.body.user)) {
        console.log("Taken!");
        res.status(400).send(`User ID ${req.body.user} is already taken!`);
    }
    else if (req.body.password === undefined) {
        res.status(400).send(`Needs a password!`);
    }
    else {
        exports.USERS_TO_ACCOUNT.set(req.body.user, []);
        USERS_TO_PASSWORD.set(req.body.user, req.body.password);
        USERS.push(req.body.user);
        res.status(200).send(`User ID ${req.body.user} successfully registered!`);
    }
};
exports.registerUser = registerUser;
// Adds account to user
const loginUser = (req, res) => {
    console.log("Welcome to login!");
    if (req.body.password === undefined || req.body.user === undefined) {
        res.status(403).send(`Malformed request`);
    }
    else if (!exports.USERS_TO_ACCOUNT.has(req.body.user)) {
        res.status(400).send(`User ID ${req.body.user} is not real!`);
    }
    else if (USERS_TO_PASSWORD.get(req.body.user) === req.body.password) {
        res.status(200).send(`Account successfully logged in!`);
    }
    else {
        res.status(400).send(`User ID ${req.body.user} incorrect password I am 808 Crashout 67 67`);
    }
};
exports.loginUser = loginUser;
// Adds account to user
const addToUser = (req, res) => {
    if (req.body.account === undefined || req.body.user === undefined) {
        res.status(403).send(`Malformed request`);
    }
    else if (!exports.USERS_TO_ACCOUNT.has(req.body.user)) {
        res.status(400).send(`User ID ${req.body.user} is not real!`);
    }
    else {
        if (req.body.account === undefined || req.body.account.user === undefined || req.body.account.password === undefined) {
            res.status(400).send(`Cannot register blank User ID`);
        }
        else if (exports.USERS_TO_ACCOUNT.has(req.body.account.user)) {
            console.log("Taken!");
            res.status(400).send(`User ID ${req.body.account.user} is already taken!`);
        }
        else if (req.body.account.password === undefined) {
            res.status(400).send(`Needs a password!`);
        }
        else {
            exports.USERS_TO_ACCOUNT.set(req.body.account.user, []);
            USERS_TO_PASSWORD.set(req.body.account.user, req.body.account.password);
            USERS_TO_PARENT.set(req.body.user, req.body.account.user);
            USERS.push(req.body.account.user);
            let list = exports.USERS_TO_ACCOUNT.get(req.body.user)?.slice();
            if (list === undefined) {
                list = [];
            }
            list.push(req.body.account.user);
            exports.USERS_TO_ACCOUNT.set(req.body.user, list);
            console.log(JSON.stringify(list));
            USERS.push(req.body.account);
            res.status(200).send(`User ID ${req.body.account.user} added to ${req.body.user}!`);
        }
    }
};
exports.addToUser = addToUser;
// Gets user info (name of immediate child accounts)
const getUserInfo = (req, res) => {
    if (req.query.user === undefined) {
        res.status(400).send(`Cannot get info on blank User ID`);
    }
    else if (exports.USERS_TO_ACCOUNT.has(req.query.user)) {
        res.status(200).send({ user: req.query.user, accounts: exports.USERS_TO_ACCOUNT.get(req.query.user),
            parent: USERS_TO_PARENT.get(req.query.user) });
    }
    else {
        res.status(400).send(`Not a valid user!`);
    }
};
exports.getUserInfo = getUserInfo;
// Gets user info (name of all child accounts [even grandchildren])
const getDeepUserInfo = (req, res) => {
    if (req.query.user === undefined) {
        res.status(400).send(`Cannot get info on blank User ID`);
    }
    else if (exports.USERS_TO_ACCOUNT.has(req.query.user)) {
        res.status(200).send({ user: req.query.user, accounts: traverseAccountsHelper(req.query.user),
            parent: USERS_TO_PARENT.get(req.query.user)
        });
    }
    else {
        res.status(400).send(`Not a valid user!`);
    }
};
exports.getDeepUserInfo = getDeepUserInfo;
// helper to traverse accounts
const traverseAccountsHelper = (username) => {
    const names = exports.USERS_TO_ACCOUNT.get(username); // names to add and also search recursively
    if (names === undefined) {
        return [username]; // account w/ no names -- return list containing name 
    }
    let namesGathered = names;
    for (const name of names) {
        const listSoFar = traverseAccountsHelper(name); // list of names seen so far
        namesGathered = namesGathered.concat(listSoFar);
    }
    return namesGathered;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3JvdXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBYSxRQUFBLGdCQUFnQixHQUFHLElBQUksR0FBRyxFQUFvQixDQUFDO0FBQzVELE1BQU0saUJBQWlCLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7QUFDcEQsTUFBTSxlQUFlLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7QUFFbEQsTUFBTSxLQUFLLEdBQW1CLEVBQUUsQ0FBQztBQUVqQyxxQkFBcUI7QUFDZCxNQUFNLFlBQVksR0FBRyxDQUFDLEdBQVEsRUFBRSxHQUFRLEVBQVMsRUFBRTtJQUN0RCxJQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtRQUM1QixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0tBQ3pEO1NBQU0sSUFBRyx3QkFBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ3JCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLG9CQUFvQixDQUFDLENBQUM7S0FDdEU7U0FBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtRQUN4QyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0tBQzdDO1NBQU07UUFDSCx3QkFBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLEdBQUcs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